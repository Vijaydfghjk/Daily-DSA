package main

import (
	"fmt"
	"math"
	"unicode"
)


// output should be the int32 
// ignore the space 
// if any special character return 0
// take -
// int(s[i] -'0') converting int 

func myAtoi(s string) int {

	i := 0

	for i < len(s) && s[i] == ' ' { // this is for finding the space

		i++
	}

	sign := 1
	if i < len(s) && s[i] == '-' {

		sign = -1
		i++
	} else if i < len(s) && s[i] == '+' {

		i++
	}

	num := 0

	for i < len(s) && unicode.IsDigit(rune(s[i])) {

		digit := int(s[i] - '0')

		if num > (math.MaxInt32-digit)/10 {
			if sign == 1 {

				return math.MaxInt32 - digit
			} else {

				return math.MinInt32
			}
		}
		num = num*10 + digit
		i++
	}

	return num * sign
}

func main() {

	get := myAtoi("-91283472332") //-91283472332
	fmt.Println(get)
}
